{"version":3,"file":"bundle.js","mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,aAAa;AACnC;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;;;;;;UC9HA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;;ACtBA;AACA;AACA,WAAW,mBAAO,CAAC,4BAAQ;AAC3B;AACA;AACA;AACA;AACA,CAAC","sources":["./js/view.js","webpack/bootstrap","./js/main.js"],"sourcesContent":["/* jshint esversion: 6 */\r\n\r\nfunction View($el) {\r\n  this.$el = $el;\r\n  this.setupEasel();\r\n}\r\n\r\nwindow._randomColorString = function(){\r\n  return '#' + Math.random().toString(16).substr(-6);\r\n};\r\n\r\nView.prototype.exercise0 = function () {\r\n  //Challenge: (example) remove the 'square' class from every li\r\n  //Result: this should cause the grid to turn into a long list of undecorated lis\r\n  //just a list of dots\r\n\r\n  //this one completed as an example :) no additional code necessary\r\n  $('li').removeClass(\"square\");\r\n};\r\n\r\nView.prototype.exercise1 = function () {\r\n  //Challenge: Give every square the class 'orange'\r\n  //Result: Every square should turn orange (we already have a CSS rule)\r\n  //your code here!\r\n  $('li').addClass(\"orange\");\r\n};\r\n\r\nView.prototype.exercise2 = function () {\r\n  //Challenge: Remove every square\r\n  //Result: Every square vanishes\r\n\r\n  //your code here!\r\n  $('li').remove();\r\n};\r\n\r\nView.prototype.exercise3 = function () {\r\n  //Challenge: Add an <h1> with the text 'i love jquery' under the grid.\r\n  //Result: An <h1> with the text 'i love jquery' appears under the grid.\r\n\r\n  //your code here!\r\n  $('#easel').append('<h1>i love jquery</h1>');\r\n};\r\n\r\nView.prototype.exercise4 = function () {\r\n  //Challenge: Write your first name in every other square.\r\n  //Result: Your name appears in every other square.\r\n\r\n  //your code here!\r\n  $('li').each(function(index){\r\n    if(index % 2 == 0){\r\n      $(this).text('Rudy451');\r\n    }\r\n  })\r\n};\r\n\r\nView.prototype.exercise5 = function () {\r\n  //Challenge: Alert the row and column of the square, when the square is clicked.\r\n  //Result: When a square is clicked, the row and column appear in an alert. for\r\n  //example: clicking the top left square should alert '0, 0'.\r\n\r\n  //hint: checkout the addRow function at the bottom of the file: we set the\r\n  //  'data-pos' of every square\r\n  //your code here!\r\n   $('ul').on('click', 'li', function(event){\r\n    alert($(event.currentTarget).attr('data-pos'));\r\n   });\r\n};\r\n\r\nView.prototype.exercise6 = function () {\r\n  //Challenge: Give every square a random color!\r\n  //Result: Every square becomes a color as soon as this code runs. The grid\r\n  //should become a beautiful rainbow of colors.\r\n\r\n  //hint: use window._randomColorString() (defined at top) to get a random color!\r\n\r\n  //your code here!\r\n  $('li').each(function(index){\r\n    $(this).css('background-color', window._randomColorString());\r\n  });\r\n};\r\n\r\nView.prototype.exercise7 = function(){\r\n  //Challenge: When your mouse goes over a square, console log its color.\r\n  //Result: When the mouse goes over a square its color should appear in the\r\n  //console. The color won't be the color's name, but its rbg value.\r\n  //You should push the button for exercise 6 first to try it on the\r\n  //rainbow.\r\n\r\n  //your code here!\r\n  $('#easel').on('click', 'li', function(index){\r\n    console.log($(this).css('background-color'));\r\n  });\r\n};\r\n\r\n\r\n\r\nView.prototype.setupEasel = function() {\r\n  const $addRowButton = $('<button>').html('Add a row');\r\n  this.$el.append($addRowButton);\r\n  $addRowButton.on(\"click\", this.addRow.bind(this));\r\n\r\n  for(let j = 0; j <= 7; j++){\r\n    const $button = $(\"<button>\").html(\"Exercise \" + j);\r\n    $button.on(\"click\", this[\"exercise\" + j]);\r\n    this.$el.append($button);\r\n  }\r\n\r\n  for(let i = 0; i < 20; i ++) {\r\n    this.addRow();\r\n  }\r\n};\r\n\r\nView.prototype.addRow = function() {\r\n  const rowIdx = this.$el.find(\".row\").length;\r\n  const $row = $(\"<ul>\").addClass(\"row\").addClass(\"group\");\r\n  for(let colIdx = 0; colIdx < 20; colIdx++) {\r\n    const $square = $(\"<li>\").addClass(\"square\").attr(\"data-pos\", [rowIdx, colIdx]);\r\n    $square.on(\"mouseenter\", (e) => {\r\n      const $square = $(e.currentTarget);\r\n      $square.css(\"background-color\", window._randomColorString());\r\n    });\r\n    $row.append($square);\r\n  }\r\n  this.$el.append($row);\r\n};\r\n\r\nmodule.exports = View;\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/* globals $ */\r\n\r\nvar View = require(\"./view\");\r\n\r\n$(function () {\r\n  var $easel = $(\"#easel\");\r\n  new View($easel);\r\n});\r\n"],"names":[],"sourceRoot":""}